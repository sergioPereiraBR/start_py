diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
http.sslbackend=openssl
http.sslcainfo=C:/Program Files/Git/mingw64/etc/ssl/certs/ca-bundle.crt
core.autocrlf=true
core.fscache=true
core.symlinks=false
pull.rebase=false
credential.helper=manager
credential.https://dev.azure.com.usehttppath=true
init.defaultbranch=main
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
user.name=Sérgio Pereira
user.email=sergiopereira.br@hotmail.com
alias.tree=log --oneline --graph --decorate --all
core.autocrlf=true
core.hookspath=D:\dev-python\start_py\.hooks_pdev
difftool.sourcetree.cmd=''
mergetool.sourcetree.cmd=''
mergetool.sourcetree.trustexitcode=true
safe.barerepository=explicit
core.repositoryformatversion=0
core.filemode=false
core.bare=false
core.logallrefupdates=true
core.symlinks=false
:

---------------------

(start-py-py3.10) PS D:\dev-python\start_py> git config --global --unset core.hooksPath
(start-py-py3.10) PS D:\dev-python\start_py> git config list
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
http.sslbackend=openssl
http.sslcainfo=C:/Program Files/Git/mingw64/etc/ssl/certs/ca-bundle.crt
core.autocrlf=true
core.fscache=true
core.symlinks=false
pull.rebase=false
credential.helper=manager
credential.https://dev.azure.com.usehttppath=true
init.defaultbranch=main
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true

Teste hooks


2025-01-02 01:24:57.684 [info] [principal] Nível de log: Info
2025-01-02 01:24:57.684 [info] [principal] Validando o git encontrado em: "C:\Program Files\Git\cmd\git.exe"
2025-01-02 01:24:57.714 [info] [principal] Usando git "2.46.2.windows.1" de "C:\Program Files\Git\cmd\git.exe"
2025-01-02 01:24:57.714 [info] [Model][doInitialScan] Initial repository scan started
2025-01-02 01:24:57.747 [info] > git rev-parse --show-toplevel [25ms]
2025-01-02 01:24:57.747 [info] fatal: not a git repository (or any of the parent directories): .git
2025-01-02 01:24:57.773 [info] > git rev-parse --show-toplevel [24ms]
2025-01-02 01:24:57.773 [info] fatal: not a git repository (or any of the parent directories): .git
2025-01-02 01:24:57.950 [info] > git rev-parse --show-toplevel [43ms]
2025-01-02 01:24:57.952 [info] fatal: not a git repository (or any of the parent directories): .git
2025-01-02 01:24:57.979 [info] > git rev-parse --show-toplevel [24ms]
2025-01-02 01:24:57.979 [info] fatal: not a git repository (or any of the parent directories): .git
2025-01-02 01:24:58.006 [info] > git rev-parse --show-toplevel [25ms]
2025-01-02 01:24:58.006 [info] fatal: not a git repository (or any of the parent directories): .git
2025-01-02 01:24:58.039 [info] > git rev-parse --show-toplevel [25ms]
2025-01-02 01:24:58.039 [info] fatal: not a git repository (or any of the parent directories): .git
2025-01-02 01:24:58.065 [info] > git rev-parse --show-toplevel [24ms]
2025-01-02 01:24:58.065 [info] fatal: not a git repository (or any of the parent directories): .git
2025-01-02 01:24:58.092 [info] > git rev-parse --show-toplevel [24ms]
2025-01-02 01:24:58.092 [info] fatal: not a git repository (or any of the parent directories): .git
2025-01-02 01:24:58.118 [info] > git rev-parse --show-toplevel [24ms]
2025-01-02 01:24:58.118 [info] fatal: not a git repository (or any of the parent directories): .git
2025-01-02 01:24:58.147 [info] > git rev-parse --show-toplevel [27ms]
2025-01-02 01:24:58.147 [info] fatal: not a git repository (or any of the parent directories): .git
2025-01-02 01:24:58.453 [info] > git rev-parse --show-toplevel [303ms]
2025-01-02 01:24:58.453 [info] fatal: not a git repository (or any of the parent directories): .git
2025-01-02 01:24:59.054 [info] > git rev-parse --show-toplevel [32ms]
2025-01-02 01:24:59.054 [info] fatal: not a git repository (or any of the parent directories): .git
2025-01-02 01:24:59.055 [info] [Model][doInitialScan] Initial repository scan completed - repositories (0), closed repositories (0), parent repositories (0), unsafe repositories (0)
2025-01-02 01:24:59.298 [info] > git rev-parse --show-toplevel [27ms]
2025-01-02 01:24:59.298 [info] fatal: not a git repository (or any of the parent directories): .git
2025-01-02 01:25:01.979 [info] [principal] Nível de log: Info
2025-01-02 01:25:01.979 [info] [principal] Validando o git encontrado em: "C:\Program Files\Git\cmd\git.exe"
2025-01-02 01:25:01.979 [info] [principal] Usando git "2.46.2.windows.1" de "C:\Program Files\Git\cmd\git.exe"
2025-01-02 01:25:01.979 [info] [Model][doInitialScan] Initial repository scan started
2025-01-02 01:25:01.979 [info] [Model][doInitialScan] Initial repository scan completed - repositories (0), closed repositories (0), parent repositories (0), unsafe repositories (0)
2025-01-02 01:25:09.971 [info] [principal] Nível de log: Info
2025-01-02 01:25:09.971 [info] [principal] Validando o git encontrado em: "C:\Program Files\Git\cmd\git.exe"
2025-01-02 01:25:10.062 [info] [principal] Usando git "2.46.2.windows.1" de "C:\Program Files\Git\cmd\git.exe"
2025-01-02 01:25:10.062 [info] [Model][doInitialScan] Initial repository scan started
2025-01-02 01:25:10.100 [info] > git rev-parse --show-toplevel [32ms]
2025-01-02 01:25:10.133 [info] > git rev-parse --git-dir --git-common-dir [29ms]
2025-01-02 01:25:10.139 [info] [Model][openRepository] Opened repository: d:\dev-python\start_py
2025-01-02 01:25:10.220 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [63ms]
2025-01-02 01:25:10.220 [info] > git rev-parse --show-toplevel [71ms]
2025-01-02 01:25:10.220 [info] > git config --get commit.template [73ms]
2025-01-02 01:25:10.357 [info] > git rev-parse --show-toplevel [130ms]
2025-01-02 01:25:10.671 [info] > git status -z -uall [304ms]
2025-01-02 01:25:10.674 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [305ms]
2025-01-02 01:25:10.679 [info] > git rev-parse --show-toplevel [316ms]
2025-01-02 01:25:10.714 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [36ms]
2025-01-02 01:25:10.717 [info] > git check-ignore -v -z --stdin [34ms]
2025-01-02 01:25:10.718 [info] > git rev-parse --show-toplevel [29ms]
2025-01-02 01:25:10.719 [info] > git config --get commit.template [31ms]
2025-01-02 01:25:10.750 [info] > git rev-parse --show-toplevel [29ms]
2025-01-02 01:25:10.750 [info] > git config --local branch.main.vscode-merge-base [33ms]
2025-01-02 01:25:10.750 [warning] [Git][config] git config failed: Failed to execute git
2025-01-02 01:25:10.752 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [40ms]
2025-01-02 01:25:10.780 [info] > git rev-parse --show-toplevel [26ms]
2025-01-02 01:25:10.784 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [25ms]
2025-01-02 01:25:10.784 [info] > git status -z -uall [27ms]
2025-01-02 01:25:10.788 [info] > git reflog main --grep-reflog=branch: Created from *. [36ms]
2025-01-02 01:25:10.811 [info] > git rev-parse --show-toplevel [28ms]
2025-01-02 01:25:10.813 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [26ms]
2025-01-02 01:25:10.818 [info] > git symbolic-ref --short refs/remotes/origin/HEAD [29ms]
2025-01-02 01:25:10.819 [info] fatal: ref refs/remotes/origin/HEAD is not a symbolic ref
2025-01-02 01:25:10.819 [warning] [Repository][getDefaultBranch] Failed to get default branch details: Failed to execute git.
2025-01-02 01:25:10.839 [info] > git rev-parse --show-toplevel [26ms]
2025-01-02 01:25:10.841 [info] > git config --local branch.main.vscode-merge-base [26ms]
2025-01-02 01:25:10.841 [warning] [Git][config] git config failed: Failed to execute git
2025-01-02 01:25:10.849 [info] > git merge-base refs/heads/main refs/remotes/origin/main [28ms]
2025-01-02 01:25:10.867 [info] > git rev-parse --show-toplevel [27ms]
2025-01-02 01:25:10.871 [info] > git reflog main --grep-reflog=branch: Created from *. [28ms]
2025-01-02 01:25:10.880 [info] > git diff --name-status -z --diff-filter=ADMR b8cc87e358f26c49b71f9e7ac87e8eee4f0ee406...refs/remotes/origin/main [29ms]
2025-01-02 01:25:10.895 [info] > git rev-parse --show-toplevel [25ms]
2025-01-02 01:25:10.899 [info] > git symbolic-ref --short refs/remotes/origin/HEAD [26ms]
2025-01-02 01:25:10.899 [info] fatal: ref refs/remotes/origin/HEAD is not a symbolic ref
2025-01-02 01:25:10.899 [warning] [Repository][getDefaultBranch] Failed to get default branch details: Failed to execute git.
2025-01-02 01:25:10.927 [info] > git rev-parse --show-toplevel [28ms]
2025-01-02 01:25:10.960 [info] > git rev-parse --show-toplevel [29ms]
2025-01-02 01:25:10.961 [info] [Model][doInitialScan] Initial repository scan completed - repositories (1), closed repositories (0), parent repositories (0), unsafe repositories (0)
2025-01-02 01:25:10.993 [info] > git show --textconv HEAD:docs/inicio_rapido.md [28ms]
2025-01-02 01:25:10.996 [info] > git ls-tree -l HEAD -- D:\dev-python\start_py\docs\inicio_rapido.md [27ms]
2025-01-02 01:25:11.028 [info] > git ls-tree -l HEAD -- D:\dev-python\start_py\docs\inicio_rapido.md [25ms]
2025-01-02 01:25:21.073 [info] > git show --textconv :mkdocs.yml [32ms]
2025-01-02 01:25:21.074 [info] > git ls-files --stage -- D:\dev-python\start_py\mkdocs.yml [28ms]
2025-01-02 01:25:21.100 [info] > git cat-file -s 6dccc31ee96d86d2223390858db06f9bb2279760 [24ms]
2025-01-02 01:25:21.130 [info] > git blame --root --incremental b8cc87e358f26c49b71f9e7ac87e8eee4f0ee406 -- D:\dev-python\start_py\mkdocs.yml [26ms]
2025-01-02 01:25:24.494 [info] > git show --textconv :docs/index.md [25ms]
2025-01-02 01:25:24.494 [info] > git ls-files --stage -- D:\dev-python\start_py\docs\index.md [23ms]
2025-01-02 01:25:24.519 [info] > git cat-file -s eebec32b700a2fd5e74456a4a7203be0991793c0 [22ms]
2025-01-02 01:25:24.549 [info] > git blame --root --incremental b8cc87e358f26c49b71f9e7ac87e8eee4f0ee406 -- D:\dev-python\start_py\docs\index.md [25ms]
2025-01-02 01:25:26.017 [info] > git ls-files --stage -- D:\dev-python\start_py\mkdocs.yml [27ms]
2025-01-02 01:25:26.019 [info] > git show --textconv :mkdocs.yml [33ms]
2025-01-02 01:25:26.041 [info] > git cat-file -s 6dccc31ee96d86d2223390858db06f9bb2279760 [22ms]
2025-01-02 01:25:27.036 [info] > git show --textconv :.git/hooks/pre-commit.sample [40ms]
2025-01-02 01:25:27.037 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\pre-commit.sample [33ms]
2025-01-02 01:25:27.394 [info] > git check-ignore -v -z --stdin [36ms]
2025-01-02 01:25:28.937 [info] > git show --textconv :.git/hooks/update.sample [39ms]
2025-01-02 01:25:28.938 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\update.sample [30ms]
2025-01-02 01:25:37.038 [info] > git show --textconv :.git/hooks/pre-commit.sample [34ms]
2025-01-02 01:25:37.038 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\pre-commit.sample [30ms]
2025-01-02 01:25:42.389 [info] > git show --textconv :scripts/toml.toml [24ms]
2025-01-02 01:25:42.390 [info] > git ls-files --stage -- D:\dev-python\start_py\scripts\toml.toml [22ms]
2025-01-02 01:25:42.418 [info] > git blame --root --incremental b8cc87e358f26c49b71f9e7ac87e8eee4f0ee406 -- D:\dev-python\start_py\scripts\toml.toml [24ms]
2025-01-02 01:25:42.418 [info] fatal: no such path scripts/toml.toml in b8cc87e358f26c49b71f9e7ac87e8eee4f0ee406
2025-01-02 01:25:42.749 [info] > git check-ignore -v -z --stdin [27ms]
2025-01-02 01:25:43.540 [info] > git show --textconv :.git/hooks/pre-commit.sample [45ms]
2025-01-02 01:25:43.541 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\pre-commit.sample [36ms]
2025-01-02 01:26:12.303 [info] > git show --textconv :.git/hooks/pre-commit.sample [36ms]
2025-01-02 01:26:12.304 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\pre-commit.sample [30ms]
2025-01-02 01:26:12.587 [info] > git check-ignore -v -z --stdin [41ms]
2025-01-02 01:26:15.963 [info] > git show --textconv :.git/hooks/pre-commit [39ms]
2025-01-02 01:26:15.964 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\pre-commit [32ms]
2025-01-02 01:26:20.321 [info] > git show --textconv :.git/hooks/pre-commit.sample [28ms]
2025-01-02 01:26:20.321 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\pre-commit.sample [26ms]
2025-01-02 01:26:25.174 [info] > git show --textconv :.git/hooks/pre-commit [41ms]
2025-01-02 01:26:25.175 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\pre-commit [34ms]
2025-01-02 01:26:40.266 [info] > git check-ignore -v -z --stdin [51ms]
2025-01-02 01:26:41.079 [info] > git show --textconv :.hooks_pdev/pre-commit [34ms]
2025-01-02 01:26:41.080 [info] > git ls-files --stage -- D:\dev-python\start_py\.hooks_pdev\pre-commit [27ms]
2025-01-02 01:26:41.104 [info] > git cat-file -s 6914ade8377487bd4e9003038c18558d97c745f8 [22ms]
2025-01-02 01:26:46.288 [info] > git show --textconv :.hooks_pdev/prepare-commit-msg [32ms]
2025-01-02 01:26:46.288 [info] > git ls-files --stage -- D:\dev-python\start_py\.hooks_pdev\prepare-commit-msg [28ms]
2025-01-02 01:26:46.313 [info] > git cat-file -s 58f46099cd4ef91e1165fa5d2a98b1590fadb594 [23ms]
2025-01-02 01:26:50.634 [info] > git blame --root --incremental b8cc87e358f26c49b71f9e7ac87e8eee4f0ee406 -- D:\dev-python\start_py\.hooks_pdev\prepare-commit-msg [26ms]
2025-01-02 01:27:06.897 [info] > git show --textconv :.git/hooks/pre-commit [35ms]
2025-01-02 01:27:06.898 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\pre-commit [28ms]
2025-01-02 01:27:28.982 [info] > git show --textconv :.git/hooks/pre-commit.sample [30ms]
2025-01-02 01:27:28.983 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\pre-commit.sample [26ms]
2025-01-02 01:27:30.933 [info] > git show --textconv :.git/hooks/prepare-commit-msg.sample [46ms]
2025-01-02 01:27:30.933 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\prepare-commit-msg.sample [36ms]
2025-01-02 01:28:34.275 [info] > git show --textconv :.git/hooks/update.sample [34ms]
2025-01-02 01:28:34.276 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\update.sample [28ms]
2025-01-02 01:29:00.676 [info] > git show --textconv :.git/hooks/applypatch-msg.sample [32ms]
2025-01-02 01:29:00.676 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\applypatch-msg.sample [25ms]
2025-01-02 01:29:30.924 [info] > git show --textconv :.git/hooks/prepare-commit-msg.sample [36ms]
2025-01-02 01:29:30.925 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\prepare-commit-msg.sample [28ms]
2025-01-02 01:31:11.025 [info] > git blame --root --incremental b8cc87e358f26c49b71f9e7ac87e8eee4f0ee406 -- D:\dev-python\start_py\.git\hooks\prepare-commit-msg.sample [31ms]
2025-01-02 01:31:11.025 [info] fatal: no such path .git/hooks/prepare-commit-msg.sample in b8cc87e358f26c49b71f9e7ac87e8eee4f0ee406
2025-01-02 01:32:07.254 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\pre-commit.py [25ms]
2025-01-02 01:32:07.255 [info] > git show --textconv :.git/hooks/pre-commit.py [28ms]
2025-01-02 01:32:07.549 [info] > git check-ignore -v -z --stdin [26ms]
2025-01-02 01:32:23.806 [info] > git blame --root --incremental b8cc87e358f26c49b71f9e7ac87e8eee4f0ee406 -- D:\dev-python\start_py\.git\hooks\pre-commit.py [47ms]
2025-01-02 01:32:23.806 [info] fatal: no such path .git/hooks/pre-commit.py in b8cc87e358f26c49b71f9e7ac87e8eee4f0ee406
2025-01-02 01:32:28.845 [info] > git config --get commit.template [24ms]
2025-01-02 01:32:28.847 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [24ms]
2025-01-02 01:32:28.875 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:32:28.875 [info] > git status -z -uall [26ms]
2025-01-02 01:32:33.947 [info] > git config --get commit.template [47ms]
2025-01-02 01:32:33.949 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [39ms]
2025-01-02 01:32:33.975 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [22ms]
2025-01-02 01:32:33.976 [info] > git status -z -uall [25ms]
2025-01-02 01:32:39.034 [info] > git config --get commit.template [42ms]
2025-01-02 01:32:39.036 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [36ms]
2025-01-02 01:32:39.062 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [22ms]
2025-01-02 01:32:39.063 [info] > git status -z -uall [25ms]
2025-01-02 01:32:44.126 [info] > git config --get commit.template [41ms]
2025-01-02 01:32:44.128 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [34ms]
2025-01-02 01:32:44.157 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [25ms]
2025-01-02 01:32:44.157 [info] > git status -z -uall [27ms]
2025-01-02 01:32:49.217 [info] > git config --get commit.template [45ms]
2025-01-02 01:32:49.219 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [39ms]
2025-01-02 01:32:49.246 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:32:49.246 [info] > git status -z -uall [25ms]
2025-01-02 01:32:54.305 [info] > git config --get commit.template [35ms]
2025-01-02 01:32:54.307 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [30ms]
2025-01-02 01:32:54.333 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:32:54.334 [info] > git status -z -uall [24ms]
2025-01-02 01:32:59.391 [info] > git config --get commit.template [35ms]
2025-01-02 01:32:59.392 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [29ms]
2025-01-02 01:32:59.419 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:32:59.420 [info] > git status -z -uall [26ms]
2025-01-02 01:33:04.473 [info] > git config --get commit.template [35ms]
2025-01-02 01:33:04.474 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [27ms]
2025-01-02 01:33:04.501 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:33:04.501 [info] > git status -z -uall [25ms]
2025-01-02 01:33:09.566 [info] > git config --get commit.template [37ms]
2025-01-02 01:33:09.567 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [31ms]
2025-01-02 01:33:09.594 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:33:09.595 [info] > git status -z -uall [26ms]
2025-01-02 01:33:14.641 [info] > git config --get commit.template [34ms]
2025-01-02 01:33:14.643 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [28ms]
2025-01-02 01:33:14.670 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [22ms]
2025-01-02 01:33:14.670 [info] > git status -z -uall [25ms]
2025-01-02 01:33:22.468 [info] > git config --get commit.template [36ms]
2025-01-02 01:33:22.470 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [31ms]
2025-01-02 01:33:22.496 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:33:22.496 [info] > git status -z -uall [25ms]
2025-01-02 01:33:27.552 [info] > git config --get commit.template [38ms]
2025-01-02 01:33:27.553 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [31ms]
2025-01-02 01:33:27.581 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [24ms]
2025-01-02 01:33:27.581 [info] > git status -z -uall [26ms]
2025-01-02 01:33:32.614 [info] > git config --get commit.template [26ms]
2025-01-02 01:33:32.614 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [25ms]
2025-01-02 01:33:32.641 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:33:32.642 [info] > git status -z -uall [26ms]
2025-01-02 01:33:37.687 [info] > git config --get commit.template [29ms]
2025-01-02 01:33:37.688 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [26ms]
2025-01-02 01:33:37.715 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:33:37.716 [info] > git status -z -uall [26ms]
2025-01-02 01:33:42.772 [info] > git config --get commit.template [45ms]
2025-01-02 01:33:42.774 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [37ms]
2025-01-02 01:33:42.801 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:33:42.801 [info] > git status -z -uall [25ms]
2025-01-02 01:33:47.843 [info] > git config --get commit.template [24ms]
2025-01-02 01:33:47.844 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [24ms]
2025-01-02 01:33:47.871 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:33:47.872 [info] > git status -z -uall [26ms]
2025-01-02 01:33:52.932 [info] > git config --get commit.template [42ms]
2025-01-02 01:33:52.933 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [36ms]
2025-01-02 01:33:52.960 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:33:52.961 [info] > git status -z -uall [25ms]
2025-01-02 01:33:59.474 [info] > git config --get commit.template [34ms]
2025-01-02 01:33:59.475 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [28ms]
2025-01-02 01:33:59.503 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:33:59.503 [info] > git status -z -uall [25ms]
2025-01-02 01:34:04.554 [info] > git config --get commit.template [35ms]
2025-01-02 01:34:04.556 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [30ms]
2025-01-02 01:34:04.582 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:34:04.583 [info] > git status -z -uall [26ms]
2025-01-02 01:34:09.612 [info] > git config --get commit.template [25ms]
2025-01-02 01:34:09.614 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [24ms]
2025-01-02 01:34:09.641 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:34:09.642 [info] > git status -z -uall [25ms]
2025-01-02 01:34:14.700 [info] > git config --get commit.template [35ms]
2025-01-02 01:34:14.701 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [30ms]
2025-01-02 01:34:14.728 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:34:14.728 [info] > git status -z -uall [25ms]
2025-01-02 01:34:21.480 [info] > git config --get commit.template [39ms]
2025-01-02 01:34:21.481 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [32ms]
2025-01-02 01:34:21.508 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [24ms]
2025-01-02 01:34:21.509 [info] > git status -z -uall [26ms]
2025-01-02 01:34:26.567 [info] > git config --get commit.template [31ms]
2025-01-02 01:34:26.569 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [27ms]
2025-01-02 01:34:26.598 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [24ms]
2025-01-02 01:34:26.599 [info] > git status -z -uall [28ms]
2025-01-02 01:34:31.651 [info] > git config --get commit.template [40ms]
2025-01-02 01:34:31.652 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [33ms]
2025-01-02 01:34:31.679 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:34:31.679 [info] > git status -z -uall [25ms]
2025-01-02 01:34:36.744 [info] > git config --get commit.template [40ms]
2025-01-02 01:34:36.745 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [34ms]
2025-01-02 01:34:36.772 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:34:36.772 [info] > git status -z -uall [25ms]
2025-01-02 01:34:41.827 [info] > git config --get commit.template [36ms]
2025-01-02 01:34:41.828 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [29ms]
2025-01-02 01:34:41.856 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:34:41.856 [info] > git status -z -uall [26ms]
2025-01-02 01:34:46.904 [info] > git config --get commit.template [37ms]
2025-01-02 01:34:46.905 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [30ms]
2025-01-02 01:34:46.931 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [22ms]
2025-01-02 01:34:46.932 [info] > git status -z -uall [25ms]
2025-01-02 01:34:51.963 [info] > git config --get commit.template [26ms]
2025-01-02 01:34:51.964 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [24ms]
2025-01-02 01:34:51.991 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [22ms]
2025-01-02 01:34:51.991 [info] > git status -z -uall [25ms]
2025-01-02 01:34:57.051 [info] > git config --get commit.template [36ms]
2025-01-02 01:34:57.052 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [29ms]
2025-01-02 01:34:57.089 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [32ms]
2025-01-02 01:34:57.090 [info] > git status -z -uall [36ms]
2025-01-02 01:35:28.155 [info] > git show --textconv :.git/hooks/sendemail-validate.sample [26ms]
2025-01-02 01:35:28.155 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\sendemail-validate.sample [24ms]
2025-01-02 01:35:41.162 [info] > git show --textconv :.git/hooks/pre-commit.sample [29ms]
2025-01-02 01:35:41.163 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\pre-commit.sample [26ms]
2025-01-02 01:35:43.482 [info] > git show --textconv :.git/hooks/pre-commit.py [39ms]
2025-01-02 01:35:43.483 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\pre-commit.py [28ms]
2025-01-02 01:35:51.332 [info] > git show --textconv :.git/hooks/prepare-commit-msg.sample [44ms]
2025-01-02 01:35:51.332 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\prepare-commit-msg.sample [37ms]
2025-01-02 01:36:06.801 [info] > git show --textconv :.git/hooks/prepare-commit-msg [32ms]
2025-01-02 01:36:06.802 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\prepare-commit-msg [26ms]
2025-01-02 01:36:07.086 [info] > git check-ignore -v -z --stdin [43ms]
2025-01-02 01:36:07.090 [info] > git show --textconv :.git/hooks/push-to-checkout.sample [25ms]
2025-01-02 01:36:07.092 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\push-to-checkout.sample [23ms]
2025-01-02 01:36:08.477 [info] > git show --textconv :.git/hooks/prepare-commit-msg [41ms]
2025-01-02 01:36:08.477 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\prepare-commit-msg [33ms]
2025-01-02 01:36:08.505 [info] > git blame --root --incremental b8cc87e358f26c49b71f9e7ac87e8eee4f0ee406 -- D:\dev-python\start_py\.git\hooks\prepare-commit-msg [23ms]
2025-01-02 01:36:08.505 [info] fatal: no such path .git/hooks/prepare-commit-msg in b8cc87e358f26c49b71f9e7ac87e8eee4f0ee406
2025-01-02 01:36:16.511 [info] > git show --textconv :.git/hooks/pre-commit.py [30ms]
2025-01-02 01:36:16.511 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\pre-commit.py [29ms]
2025-01-02 01:36:23.435 [info] > git config --get commit.template [36ms]
2025-01-02 01:36:23.436 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [31ms]
2025-01-02 01:36:23.464 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:36:23.464 [info] > git status -z -uall [26ms]
2025-01-02 01:36:28.519 [info] > git config --get commit.template [34ms]
2025-01-02 01:36:28.520 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [28ms]
2025-01-02 01:36:28.546 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [22ms]
2025-01-02 01:36:28.547 [info] > git status -z -uall [25ms]
2025-01-02 01:36:33.585 [info] > git config --get commit.template [24ms]
2025-01-02 01:36:33.587 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [23ms]
2025-01-02 01:36:33.613 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:36:33.614 [info] > git status -z -uall [25ms]
2025-01-02 01:36:39.816 [info] > git log --format=%H%n%aN%n%aE%n%at%n%ct%n%P%n%D%n%B -z --shortstat --diff-merges=first-parent -n50 --skip=0 --topo-order --decorate=full --stdin [33ms]
2025-01-02 01:36:55.132 [info] > git ls-files --stage -- D:\dev-python\start_py\nota.txt [33ms]
2025-01-02 01:36:55.134 [info] > git show --textconv :nota.txt [42ms]
2025-01-02 01:36:55.157 [info] > git cat-file -s 1f6856a660509097977a2b8fe5743d60f130199e [23ms]
2025-01-02 01:36:57.007 [info] > git blame --root --incremental b8cc87e358f26c49b71f9e7ac87e8eee4f0ee406 -- D:\dev-python\start_py\nota.txt [26ms]
2025-01-02 01:37:00.323 [info] > git config --get commit.template [26ms]
2025-01-02 01:37:00.325 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [25ms]
2025-01-02 01:37:00.352 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:37:00.352 [info] > git status -z -uall [25ms]
2025-01-02 01:37:05.407 [info] > git config --get commit.template [42ms]
2025-01-02 01:37:05.409 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [36ms]
2025-01-02 01:37:05.436 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:37:05.437 [info] > git status -z -uall [26ms]
2025-01-02 01:37:07.042 [info] > git log --format=%H%n%aN%n%aE%n%at%n%ct%n%P%n%D%n%B -z --shortstat --diff-merges=first-parent -n50 --skip=0 --topo-order --decorate=full --stdin [32ms]
2025-01-02 01:37:09.893 [info] > git add -A -- D:\dev-python\start_py\nota.txt [167ms]
2025-01-02 01:37:09.934 [info] > git config --get commit.template [33ms]
2025-01-02 01:37:09.936 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [28ms]
2025-01-02 01:37:09.963 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:37:09.964 [info] > git status -z -uall [26ms]
2025-01-02 01:37:10.351 [info] > git show --textconv HEAD:nota.txt [42ms]
2025-01-02 01:37:10.352 [info] > git ls-tree -l HEAD -- D:\dev-python\start_py\nota.txt [32ms]
2025-01-02 01:37:10.495 [info] > git config --get commit.template [32ms]
2025-01-02 01:37:10.496 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [27ms]
2025-01-02 01:37:10.523 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:37:10.524 [info] > git status -z -uall [26ms]
2025-01-02 01:37:11.187 [info] > git ls-files --stage -- D:\dev-python\start_py\nota.txt [40ms]
2025-01-02 01:37:11.190 [info] > git ls-tree -l HEAD -- D:\dev-python\start_py\nota.txt [33ms]
2025-01-02 01:37:11.212 [info] > git cat-file -s f9a859e0909124d5787a44d5e661d38f996c72a1 [23ms]
2025-01-02 01:37:11.215 [info] > git show --textconv HEAD:nota.txt [23ms]
2025-01-02 01:37:11.238 [info] > git show --textconv :nota.txt [22ms]
2025-01-02 01:37:15.583 [info] > git config --get commit.template [42ms]
2025-01-02 01:37:15.584 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [35ms]
2025-01-02 01:37:15.613 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [25ms]
2025-01-02 01:37:15.614 [info] > git status -z -uall [28ms]
2025-01-02 01:37:19.422 [info] > git -c user.useConfigOnly=true commit --quiet [489ms]
2025-01-02 01:37:19.422 [info] on pre-commit.py -> prepare-commit-msg
['.git/COMMIT_EDITMSG']
2025-01-02 01:37:19.447 [info] > git config --get-all user.name [22ms]
2025-01-02 01:37:19.472 [info] > git config --get-all user.email [23ms]
2025-01-02 01:37:19.498 [info] > git config --get commit.template [24ms]
2025-01-02 01:37:19.500 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [24ms]
2025-01-02 01:37:19.527 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:37:19.528 [info] > git status -z -uall [26ms]
2025-01-02 01:37:30.853 [info] > git ls-files --stage -- D:\dev-python\start_py\nota.txt [26ms]
2025-01-02 01:37:30.855 [info] > git ls-tree -l HEAD -- D:\dev-python\start_py\nota.txt [26ms]
2025-01-02 01:37:30.878 [info] > git cat-file -s f9a859e0909124d5787a44d5e661d38f996c72a1 [24ms]
2025-01-02 01:37:30.881 [info] > git show --textconv HEAD:nota.txt [24ms]
2025-01-02 01:37:30.905 [info] > git show --textconv :nota.txt [24ms]
2025-01-02 01:38:02.563 [info] > git -c user.useConfigOnly=true commit --quiet [351ms]
2025-01-02 01:38:02.563 [info] on pre-commit.py -> prepare-commit-msg
['.git/COMMIT_EDITMSG']
2025-01-02 01:38:02.589 [info] > git config --get-all user.name [23ms]
2025-01-02 01:38:02.613 [info] > git config --get-all user.email [23ms]
2025-01-02 01:38:02.638 [info] > git config --get commit.template [23ms]
2025-01-02 01:38:02.640 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [24ms]
2025-01-02 01:38:02.668 [info] > git status -z -uall [26ms]
2025-01-02 01:38:02.668 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [24ms]
2025-01-02 01:38:04.398 [info] > git ls-files --stage -- D:\dev-python\start_py\nota.txt [43ms]
2025-01-02 01:38:04.401 [info] > git ls-tree -l HEAD -- D:\dev-python\start_py\nota.txt [43ms]
2025-01-02 01:38:04.423 [info] > git cat-file -s f9a859e0909124d5787a44d5e661d38f996c72a1 [23ms]
2025-01-02 01:38:04.427 [info] > git show --textconv HEAD:nota.txt [23ms]
2025-01-02 01:38:04.450 [info] > git show --textconv :nota.txt [24ms]
2025-01-02 01:38:08.623 [info] > git -c user.useConfigOnly=true commit --quiet [345ms]
2025-01-02 01:38:08.623 [info] on pre-commit.py -> prepare-commit-msg
['.git/COMMIT_EDITMSG']
2025-01-02 01:38:08.648 [info] > git config --get-all user.name [24ms]
2025-01-02 01:38:08.672 [info] > git config --get-all user.email [22ms]
2025-01-02 01:38:08.698 [info] > git config --get commit.template [24ms]
2025-01-02 01:38:08.699 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [23ms]
2025-01-02 01:38:08.727 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:38:08.727 [info] > git status -z -uall [26ms]
2025-01-02 01:38:10.134 [info] > git ls-files --stage -- D:\dev-python\start_py\nota.txt [26ms]
2025-01-02 01:38:10.136 [info] > git ls-tree -l HEAD -- D:\dev-python\start_py\nota.txt [26ms]
2025-01-02 01:38:10.159 [info] > git cat-file -s f9a859e0909124d5787a44d5e661d38f996c72a1 [23ms]
2025-01-02 01:38:10.162 [info] > git show --textconv HEAD:nota.txt [24ms]
2025-01-02 01:38:10.186 [info] > git show --textconv :nota.txt [25ms]
2025-01-02 01:38:15.835 [info] > git -c user.useConfigOnly=true commit --quiet [348ms]
2025-01-02 01:38:15.835 [info] on pre-commit.py -> prepare-commit-msg
['.git/COMMIT_EDITMSG']
2025-01-02 01:38:15.860 [info] > git config --get-all user.name [24ms]
2025-01-02 01:38:15.885 [info] > git config --get-all user.email [23ms]
2025-01-02 01:38:15.911 [info] > git config --get commit.template [24ms]
2025-01-02 01:38:15.913 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [24ms]
2025-01-02 01:38:15.940 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [24ms]
2025-01-02 01:38:15.940 [info] > git status -z -uall [26ms]
2025-01-02 01:38:17.294 [info] > git ls-files --stage -- D:\dev-python\start_py\nota.txt [27ms]
2025-01-02 01:38:17.296 [info] > git ls-tree -l HEAD -- D:\dev-python\start_py\nota.txt [26ms]
2025-01-02 01:38:17.320 [info] > git cat-file -s f9a859e0909124d5787a44d5e661d38f996c72a1 [23ms]
2025-01-02 01:38:17.322 [info] > git show --textconv HEAD:nota.txt [24ms]
2025-01-02 01:38:17.346 [info] > git show --textconv :nota.txt [24ms]
2025-01-02 01:39:00.991 [info] > git show --textconv :.git/hooks/prepare-commit-msg.sample [37ms]
2025-01-02 01:39:00.991 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\prepare-commit-msg.sample [28ms]
2025-01-02 01:39:21.771 [info] > git show --textconv :.git/hooks/commit-msg.sample [39ms]
2025-01-02 01:39:21.772 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\commit-msg.sample [32ms]
2025-01-02 01:39:24.512 [info] > git blame --root --incremental b8cc87e358f26c49b71f9e7ac87e8eee4f0ee406 -- D:\dev-python\start_py\.git\hooks\commit-msg.sample [27ms]
2025-01-02 01:39:24.512 [info] fatal: no such path .git/hooks/commit-msg.sample in b8cc87e358f26c49b71f9e7ac87e8eee4f0ee406
2025-01-02 01:39:33.009 [info] > git show --textconv :.git/hooks/prepare-commit-msg.sample [39ms]
2025-01-02 01:39:33.010 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\prepare-commit-msg.sample [32ms]
2025-01-02 01:39:47.231 [info] > git show --textconv :.git/hooks/pre-commit.sample [35ms]
2025-01-02 01:39:47.231 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\pre-commit.sample [29ms]
2025-01-02 01:39:53.211 [info] > git show --textconv :.git/hooks/commit-msg.sample [37ms]
2025-01-02 01:39:53.212 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\commit-msg.sample [30ms]
2025-01-02 01:40:09.097 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\pre-commit.py [25ms]
2025-01-02 01:40:09.097 [info] > git show --textconv :.git/hooks/pre-commit.py [27ms]
2025-01-02 01:40:09.334 [info] > git check-ignore -v -z --stdin [34ms]
2025-01-02 01:40:17.161 [info] > git config --get commit.template [30ms]
2025-01-02 01:40:17.163 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [27ms]
2025-01-02 01:40:17.190 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:40:17.191 [info] > git status -z -uall [26ms]
2025-01-02 01:40:22.468 [info] > git log --format=%H%n%aN%n%aE%n%at%n%ct%n%P%n%D%n%B -z --shortstat --diff-merges=first-parent -n50 --skip=0 --topo-order --decorate=full --stdin [32ms]
2025-01-02 01:40:30.033 [info] > git show --textconv :.git/COMMIT_EDITMSG [32ms]
2025-01-02 01:40:30.037 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\COMMIT_EDITMSG [30ms]
2025-01-02 01:40:30.913 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\COMMIT_EDITMSG [46ms]
2025-01-02 01:40:30.937 [info] > git show --textconv :.git/COMMIT_EDITMSG [22ms]
2025-01-02 01:40:50.433 [info] > git show --textconv :.git/hooks/pre-commit.py [29ms]
2025-01-02 01:40:50.433 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\pre-commit.py [27ms]
2025-01-02 01:40:50.553 [info] > git -c user.useConfigOnly=true commit --quiet [20919ms]
2025-01-02 01:40:50.553 [info] on pre-commit.py -> commit-msg
['.git/COMMIT_EDITMSG']
2025-01-02 01:40:50.579 [info] > git config --get-all user.name [23ms]
2025-01-02 01:40:50.604 [info] > git config --get-all user.email [24ms]
2025-01-02 01:40:50.630 [info] > git config --get commit.template [24ms]
2025-01-02 01:40:50.631 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [24ms]
2025-01-02 01:40:50.659 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:40:50.660 [info] > git status -z -uall [26ms]
2025-01-02 01:41:08.818 [info] > git ls-files --stage -- D:\dev-python\start_py\.hooks_pdev\prepare-commit-msg [30ms]
2025-01-02 01:41:08.820 [info] > git show --textconv :.hooks_pdev/prepare-commit-msg [41ms]
2025-01-02 01:41:08.841 [info] > git cat-file -s 58f46099cd4ef91e1165fa5d2a98b1590fadb594 [22ms]
2025-01-02 01:41:26.886 [info] > git show --textconv :.git/hooks/commit-msg [40ms]
2025-01-02 01:41:26.887 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\commit-msg [30ms]
2025-01-02 01:41:26.918 [info] > git blame --root --incremental b8cc87e358f26c49b71f9e7ac87e8eee4f0ee406 -- D:\dev-python\start_py\.git\hooks\commit-msg [23ms]
2025-01-02 01:41:26.918 [info] fatal: no such path .git/hooks/commit-msg in b8cc87e358f26c49b71f9e7ac87e8eee4f0ee406
2025-01-02 01:41:45.192 [info] > git log --format=%H%n%aN%n%aE%n%at%n%ct%n%P%n%D%n%B -z --shortstat --diff-merges=first-parent -n50 --skip=0 --topo-order --decorate=full --stdin [32ms]
2025-01-02 01:41:49.208 [info] > git show --textconv :.git/COMMIT_EDITMSG [29ms]
2025-01-02 01:41:49.209 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\COMMIT_EDITMSG [28ms]
2025-01-02 01:41:50.089 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\COMMIT_EDITMSG [38ms]
2025-01-02 01:41:50.115 [info] > git show --textconv :.git/COMMIT_EDITMSG [23ms]
2025-01-02 01:41:52.149 [info] > git blame --root --incremental b8cc87e358f26c49b71f9e7ac87e8eee4f0ee406 -- D:\dev-python\start_py\.git\COMMIT_EDITMSG [40ms]
2025-01-02 01:41:52.149 [info] fatal: no such path .git/COMMIT_EDITMSG in b8cc87e358f26c49b71f9e7ac87e8eee4f0ee406
2025-01-02 01:41:54.249 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\COMMIT_EDITMSG [48ms]
2025-01-02 01:41:54.275 [info] > git show --textconv :.git/COMMIT_EDITMSG [22ms]
2025-01-02 01:41:55.896 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\COMMIT_EDITMSG [40ms]
2025-01-02 01:41:55.920 [info] > git show --textconv :.git/COMMIT_EDITMSG [22ms]
2025-01-02 01:41:57.808 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\COMMIT_EDITMSG [36ms]
2025-01-02 01:41:57.833 [info] > git show --textconv :.git/COMMIT_EDITMSG [22ms]
2025-01-02 01:41:58.837 [info] > git -c user.useConfigOnly=true commit --quiet [10010ms]
2025-01-02 01:41:58.837 [info] Seu commit foi rejeitado porque a mensagem está fora do padrão

Por favor, utilize o seguinte formato
feat: comentário de exemplo de uma feature
2025-01-02 01:41:58.861 [info] > git config --get-all user.name [22ms]
2025-01-02 01:41:58.886 [info] > git config --get-all user.email [22ms]
2025-01-02 01:41:58.912 [info] > git config --get commit.template [24ms]
2025-01-02 01:41:58.913 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [24ms]
2025-01-02 01:41:58.940 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [23ms]
2025-01-02 01:41:58.941 [info] > git status -z -uall [26ms]
2025-01-02 01:41:59.008 [info] > git show --textconv :.git/hooks/commit-msg [25ms]
2025-01-02 01:41:59.009 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\hooks\commit-msg [23ms]
2025-01-02 01:42:41.457 [info] > git show --textconv :.git/COMMIT_EDITMSG [38ms]
2025-01-02 01:42:41.457 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\COMMIT_EDITMSG [32ms]
2025-01-02 01:42:42.344 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\COMMIT_EDITMSG [54ms]
2025-01-02 01:42:42.369 [info] > git show --textconv :.git/COMMIT_EDITMSG [23ms]
2025-01-02 01:42:46.083 [info] > git ls-files --stage -- D:\dev-python\start_py\.git\COMMIT_EDITMSG [41ms]
2025-01-02 01:42:46.109 [info] > git show --textconv :.git/COMMIT_EDITMSG [23ms]
2025-01-02 01:42:51.965 [info] > git -c user.useConfigOnly=true commit --quiet [10908ms]
2025-01-02 01:42:51.965 [info] Seu commit foi rejeitado porque a mensagem está fora do padrão

Por favor, utilize o seguinte formato
feat: comentário de exemplo de uma feature
2025-01-02 01:42:51.990 [info] > git config --get-all user.name [23ms]
2025-01-02 01:42:52.014 [info] > git config --get-all user.email [23ms]
2025-01-02 01:42:52.039 [info] > git config --get commit.template [23ms]
2025-01-02 01:42:52.041 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [24ms]
2025-01-02 01:42:52.069 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [24ms]
2025-01-02 01:42:52.069 [info] > git status -z -uall [26ms]
2025-01-02 01:43:33.024 [info] > git -c user.useConfigOnly=true commit --quiet --allow-empty-message --file - [64ms]
2025-01-02 01:43:33.024 [info] Seu commit foi rejeitado porque a mensagem está fora do padrão

Por favor, utilize o seguinte formato
feat: comentário de exemplo de uma feature
2025-01-02 01:43:33.049 [info] > git config --get-all user.name [23ms]
2025-01-02 01:43:33.074 [info] > git config --get-all user.email [23ms]
2025-01-02 01:43:33.099 [info] > git config --get commit.template [23ms]
2025-01-02 01:43:33.101 [info] > git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) --ignore-case refs/heads/main refs/remotes/main [23ms]
2025-01-02 01:43:33.129 [info] > git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname) [24ms]
2025-01-02 01:43:33.129 [info] > git status -z -uall [26ms]